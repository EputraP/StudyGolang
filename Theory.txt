--------------------------Go CLI-------------------
- go build     : compiles a bunch of code files
- go run       : compiles and executes one or two files
- go fmt       : formats all the code in each file in the current dierctory
- go install   : compiles and install a package
- go get       : downloads the raw source code of someone else's package
- go test      : runs any test associated with current project

---------------------------Package----------------------
- Package === Project === Workspace
- a package is a collection of common source code files
- a package can have many related files inside of it
- each file ending with a file extention of GO (.go)
- the only requirement for every single file inside of a package is that the very first line of each file must declare the package that it belongs to
- Types of packages:
    > Executeable 
        o Generates a file that we can run
    > Reuseable
        o code used as 'helpers' good place to put reusable logic
- Summary
    > Executeable package 
        o Package main => defines a package that can be compiled and then "executed" must have func called main
    > Reuseable package
        o package calculator => defines a package that can be used as depedency (helper code)
        o package uploader => defines a package that can be used as depedency (helper code)

--------------------------import statement----------------------
- import statement is used to give our package access to some code that is written inside of another package
- fmt is the name of standard library package that is included with the go programming language by defualt
- fmt used to print out a lot of different information specifically to the terminal

------------------------- Variable Declaration ----------------
- ex: var card string = "ace of spades"
    > var  : create new Variable
    > card : the name of the Variable
    > string : only a "string" will ever be assigned to this Variable
    > "ace of spades" : assign the value "ace of spades" to this Variable
- or you can use syntax like this (but just to initialize the value)
- card := "Ace of spades" 

------------------------- Function Declaration ----------------
- ex: func newCard() string {

}
    > newCard() : Define a function called "newCard"
    > string : when executed, this function will return a value of type string

------------------------- Slice and For Loops ----------------
- Array : Fixed length list of things
- Slice : An array that can grow or shrink
- both array and slice must be defined with data type


------------------------- For loops Declaration ----------------
- ex: for index, card := range cards{
    fmt.Println(card)
}
- index : index of this element in the array
- card : current card we are iterating over
- range cards: take the slice of cards and loop over it
- fmt.Println() :  run this code one time for each card in the slice

------------------------- Object Oriented Approach vs GO Approach  ----------------
- Go is not an object oriented programming language
- so it's not any idea classes inside of go
- but go have a method to handle similar to Object oriented
- the briefly flow like this:
    > Go have some base go types (string, integer, float, array, map)
    > we want to extend a base type and add some extra functionality to it
    > so, we create "type deck []string"
    > tell go we want to create an array of strings and add a bunch of functions specifically made to work with it
    > create function like method in OO, "Functions with 'deck' as a 'receiver'"
    > a function with a receiver is like a "method" - a function that belongs to an "instance"
- see the picture to more details about GO approach to handle OO
- func (d deck) print(){

}
    > any variable of type "deck" now gets access to the "print" method
    > (d deck) is receiver
    > receiver sets up methods on variable that we create
    > d : the actual copy of the deck we are working with is available in the function as a variable called "d"
    > deck: every variable of type "deck" can call this function on itself
-

------------------------- Tipe Data  ----------------
- Tipe Data Number
    > dua tipe data number
        o Integer 
        o Floating point
    > tipe data integer
        o int8
            - min: -128
            - max: 127
        o int16
            - min: -32768
            - max: 32767
        o int32
            - min: -2147483648
            - max: 2147483647
        o int64
            - min: -9223372036854775808
            - max: 9223372036854775807
        o uint8
            - min: 0
            - max: 255
        o uint16
            - min: 0
            - max: 65535
        o uint32
            - min: 0
            - max: 4294967295
        o uint64
            - min: 0
            - max: 18446744073709551615
    > tipe data Floating point
        o float32
            - min: 1.18x10^-38
            - max: 3.4x10^38
        o float64
            - min: 2.23x10^-308
            - max: 1.80x10^308
        o complex64
            - complex numbers with float32 real and imaginary parts
        o complex128
            - complex numbers with float64 real and imaginary parts  
    > alias (defaultnya)
        o byte
            - alias untuk: uint8
        o rune
            - alias untuk: int32 
        o int
            - alias untuk: int32
        o uint
            - alias untuk: uint32
- Tipe Data Boolean
    > direpresentasikan dengan kata kunci "bool"
- Tipe Data String
    > direpresentasikan denga kata kunci "string"
    > string golang selalu diawali dengan karakter " (petik dua) dan diakhiri dengan petik dua lagi
    > function untuk string
        o len("string")
            - menghitung jumlah karakter di string
        o "string"[number]
            - mengambil karakter pada posisi yang ditentukan

------------------------- variable ----------------
- di golang, variable hanya bisa menyimpan tipe data yang sama, jika kita ingin menyimpan data yang berbeda beda jenis, kita haris membuat beberapa variable 
- membuat variable dapat menggunakan kata kunci "var", lalu diikuti dengan nama variable dan tipe datanya
    > contohnya: var namaOrang string
- saat membuat variable, wajib menyebutkan tipe data dari variable tersebut. tapi kalo menginisialisasi nilai awal ke variablenya maka tidak wajib menyebutkan tipe data variablenya
    > contohnya kalo tanpa inisialisasi awal:
        - var namaOrang string
        - namaOrang = "Namaku Budi"
    > contohnya pake inisialisasi awal:
        - var namaOrang = "Namaku Budi"
    > contohnya pake inisialisasi awal tapi tetep declare tipe datanya (kalo gk dideclare tipe datanya bakal pake default int (int32)):
        - var age int8 = 30
- Kata kunci var
    > kata kunci var saat membuat variable tidaklah wajib
    > asalkan saat membuat variable, langsung menginisialisasi datanya
    > agar tidak perlu menggunakan kata kunci var, perlu untuk menggunakan kata kunci ":=" saat menginisialisasikan data pada variable tersebut
        - contohnya : contry := "Indonesia"
        - terus mau ganti nilai countrynya nanti jadi gini, country = "america"
- deklarasi multiple variable
    > di golang kita bisa membuat variable secara sekaligus banyak
    > code yang dibuat akan lebih bagus dan mudah dibaca
        - contohnya: 
        - var (
            firstName = "Eka Putra"
            lastName = "Prasetya"
        )

------------------------- constant ----------------
