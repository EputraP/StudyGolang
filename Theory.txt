--------------------------Go CLI-------------------
- go build     : compiles a bunch of code files
- go run       : compiles and executes one or two files
- go fmt       : formats all the code in each file in the current dierctory
- go install   : compiles and install a package
- go get       : downloads the raw source code of someone else's package
- go test      : runs any test associated with current project

---------------------------Package----------------------
- Package === Project === Workspace
- a package is a collection of common source code files
- a package can have many related files inside of it
- each file ending with a file extention of GO (.go)
- the only requirement for every single file inside of a package is that the very first line of each file must declare the package that it belongs to
- Types of packages:
    > Executeable 
        o Generates a file that we can run
    > Reuseable
        o code used as 'helpers' good place to put reusable logic
- Summary
    > Executeable package 
        o Package main => defines a package that can be compiled and then "executed" must have func called main
    > Reuseable package
        o package calculator => defines a package that can be used as depedency (helper code)
        o package uploader => defines a package that can be used as depedency (helper code)

--------------------------import statement----------------------
- import statement is used to give our package access to some code that is written inside of another package
- fmt is the name of standard library package that is included with the go programming language by defualt
- fmt used to print out a lot of different information specifically to the terminal

------------------------- Variable Declaration ----------------
- ex: var card string = "ace of spades"
    > var  : create new Variable
    > card : the name of the Variable
    > string : only a "string" will ever be assigned to this Variable
    > "ace of spades" : assign the value "ace of spades" to this Variable
- or you can use syntax like this (but just to initialize the value)
- card := "Ace of spades" 

------------------------- Function Declaration ----------------
- ex: func newCard() string {

}
    > newCard() : Define a function called "newCard"
    > string : when executed, this function will return a value of type string

------------------------- Slice and For Loops ----------------
- Array : Fixed length list of things
- Slice : An array that can grow or shrink
- both array and slice must be defined with data type


------------------------- For loops Declaration ----------------
- ex: for index, card := range cards{
    fmt.Println(card)
}
- index : index of this element in the array
- card : current card we are iterating over
- range cards: take the slice of cards and loop over it
- fmt.Println() :  run this code one time for each card in the slice

------------------------- Object Oriented Approach vs GO Approach  ----------------
- Go is not an object oriented programming language
- so it's not any idea classes inside of go
- but go have a method to handle similar to Object oriented
- the briefly flow like this:
    > Go have some base go types (string, integer, float, array, map)
    > we want to extend a base type and add some extra functionality to it
    > so, we create "type deck []string"
    > tell go we want to create an array of strings and add a bunch of functions specifically made to work with it
    > create function like method in OO, "Functions with 'deck' as a 'receiver'"
    > a function with a receiver is like a "method" - a function that belongs to an "instance"
- see the picture to more details about GO approach to handle OO